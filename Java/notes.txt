
>> links 
      - https://docs.oracle.com/javase/tutorial/java/concepts/object.html
      - 

>> instanceof 
      - used when downcasting 
      - returns false of object is null

>> inheritence 
      - You can declare a field in the subclass with the same name as the one in the superclass, thus hiding it (not recommended).
      - You can write a new INSTANCE method in the subclass that has the same signature as the one in the superclass, thus overriding it.
      - You can write a new STATIC method in the subclass that has the same signature as the one in the superclass, thus hiding it.

      - java does not support multiple inheritence(inheriting from multiple classes at the same time)
      to avoid ambiguity and name conflicts
      - multiple inheritence only occurs when a class implements two interfaces with same default method 
      and there are defined rules to do it

>> overriding 
      - An overriding method can also return a subtype of the type returned by the overridden method. 
      This subtype is called a covariant return type.
      - @Override annotation 
            - used before the method we tend to Override
            - raises an error if no such method occurs int parent class 
            - increases readibility 

>> polymorphism 
      - Overloading (complie time polymorphism) or (static polymorphism / binding) or (Early binding)
      - Overriding (runtime polymorphism) or (dynamic polymorphism / binding) or (Late binding)
      - use case scenario
            - We have a parent class and many subclasses implementing it. We can store object reference of all these objects
            int the same array of parent type and stil use the overloaded methods seperately.
            - We have a function that has parameter of type parent - and can recieve child object as argument
            and thus can perform task for all the childs, otherwise we will write a separete for each child class

>> constructors 
      - two types 
            - default 
            - parametrized 
      - called on their own on object creation 
      - no argument, default constructor is ONLY generated when NO constructor is provided to class  
      - if no access specifier is mentioned then construct is by default package private (i.e.) visible inside the packed only      
      we can explicitly make constructors public
      - If a subclass constructor invokes a constructor of its superclass, either explicitly 
      or implicitly, you might think that there will be a whole chain of constructors called, 
      all the way back to the constructor of Object. In fact, this is the case It is called 
      CONSTRUCTOR CHAINING, and you need to be aware of it when there is a long line of class descent.
      - You can use access modifiers in a constructor's declaration to control which other classes can call the constructor.

>> Object Class 
      - is parent class of all the classes 
      - has a no argument constructor
      - has following methods 
            - protected Object clone() throws CloneNotSupportedException
                  - Creates and returns a copy of this object.
                  - The simplest way to make your class cloneable is to add implements Cloneable to your class's declaration. 
                  then your objects can invoke the clone() method
            - public boolean equals(Object obj)
                  - Indicates whether some other object is "equal to" this one.
                  - we override it the way we want to compare the objects 
            - protected void finalize() throws Throwable
                  - Called by the garbage collector on an object when garbage
                  - collection determines that there are no more references to the object
            - public final Class getClass()
                  - Returns the runtime class of an object.
            - public int hashCode()
                  - Returns a hash code value for the object.
                  - The value returned by hashCode() is the object's hash code, which is the 
                  object's memory address in hexadecimal.
            - public String toString()
                  - Returns a string representation of the object.

      - following are used while dealing with threads 
            - public final void notify()
            - public final void notifyAll()
            - public final void wait()
            - public final void wait(long timeout)
            - public final void wait(long timeout, int nanos)

>> super 
      - cannot be used inside the static methods 
      (error:  non-static variable super cannot be referenced 
      from a static context)
      - used for 
            - parent class constructor
            - parent class method
            - parent class variable

>> final 
      - restrict usage of variables, methods and class 
            - variables are constants 
            - methods cannot be overridden
            - class cannnot be inherited
      - Methods called from constructors should generally be declared final. 
      If a constructor calls a non-final method, a subclass may redefine 
      that method with surprising or undesirable results.

      - Note that you can also declare an entire class final. A class that 
      is declared final cannot be subclassed. This is particularly useful,
      for example, when creating an immutable class like the String class.


>> abstract class 
      - similar with interfaces
            - it may or may not include abstract methods
            - it cannot be instantiated 
            - contains mixed methods (both implemented and abstract)
      - features 
            - all fields are automatically public, static, and final,
            - can declare fields that are not static and final, 
            and define public, protected, and private concrete methods.
            - can extend only one class abstract or not
            - In Java, we can have an abstract class without any abstract method. 
            This allows us to create classes that cannot be instantiated,
            but can only be inherited.
      - use 
            - You want to share code among several closely related classes.
            - You expect that classes that extend your abstract class have many 
            common methods or fields, or require access modifiers other than public 
            (such as protected and private).
            - You want to declare non-static or non-final fields. This enables 
            you to define methods that can access and modify the state of the object 
            to which they belong.

      - An example of an abstract class in the JDK is AbstractMap

>> interfaces 
      - similar with abstract classes 
            - it cannot be instantiated 
            - contains mixed methods (both implemented and abstract)
      - features ``
            - all fields are automatically public, static, and final,
            - all methods are public by defalut
            - can extend any number of interfaces 
            - also several interfaces can be implemented by one class 

      -use 
            - You expect that unrelated classes would implement your interface. For example,
             the interfaces Comparable and Cloneable are implemented by many unrelated classes.
            - You want to specify the behavior of a particular data type, but not concerned 
            about who implements its behavior.
            - You want to take advantage of multiple inheritance of type.

      - An example of a class in the JDK that implements several interfaces is HashMap, 
      which implements the interfaces Serializable, Cloneable, and Map<K, V>. 


>> package 
      - A package is a namespace that organizes a set of related classes and interfaces. 
      Conceptually you can think of packages as being similar to different folders on your computer.  
      It makes sense to keep things organized in large softwares by placing related classes and interfaces into packages.
      - Why they make things easy 
            - classes with same names can be defined in two diff packages and still be used 
            - We can also have the hidden classes that are not visible outside and used by the package.
            - most importantly it makes access and locating classes easier 

>> JAVA API
      - file system
      - sockets 
      - GUI
      - strings 
      - etc. 


>> this 
      - used to refer to current object 
      - used in constructor chaining (calling one constructor from another)
      - It can be passed as an argument in the method call.
      - It can be passed as argument in the constructor call.
      - Used to return the current class instance.
      - Used to invoke current class method (implicitly)

>> objects in java 
      - go through these steps when created 
            - declaration (reference variable created)
            - instantiation (by new keyword)
            - initialiazation (in constructors) 


>> access modifiers
      - top level 
            - access modifier of a class can only be public or package private and nothing else 
            - public 
                  - classes declared public are visible everywhere
            - package level (nno - modifier)
                  - classes with no modifiers are visible inside the package only 
      member level 
            - public
                  - open to world
            - protected
                  - class 
                  - subclass in another package
                  - package
            - no modifier (default)
                  - class 
                  - package
            - private
                  - class 


>> static
      - variable
      - method
      - block (not in c++)
      - nested class (cannot use the non-static members of the class)
      - main difference is there is no local static variables in functions as in c++



>> Transient keyword 
      - a transient object is excluded from serialization.
      - cannot be used with static keyword
      - A transient keyword can only be applied to fields or member variables. 
      Applying it to the method or local variable is a compilation error.
      - Another important point is that you can declare a variable static and transient at 
      the same time and java compiler doesn't complain but doing that doesn't make any sense 
      because the transient is to instruct "do not save this field" and static variables are 
      not saved anyway during serialization.

>> volatile keyword

- the value is read or written always on a main memory and not on CPU cache (local thread cache) 
- it is guaranteed that any thread that reads the field will see the most recently written value. 
- The volatile keyword will not perform any mutual exclusive lock on the variable.
- Volatile keyword is used to modify the value of a variable by different threads. 
- It is also used to make classes thread safe.  
- The volatile keyword can be used either with primitive type or objects.
- The volatile keyword cannot be used with classes or methods. 

-- IMPORTANT: It can be used as an alternative way of achieving synchronization in Java.

List ans example 



>>> volatile vs synchronization

            Volatile Keyword	                                                       Synchronization Keyword

1. Volatile keyword is a field modifier.	                        Synchronized keyword modifies code blocks and methods.
2. The thread cannot be blocked for waiting in case of volatile.	Threads can be blocked for waiting in case of synchronized.
3. It improves thread performance.	                              Synchronized methods degrade the thread performance.
4. It synchronizes the value of one variable at a time between 
5. thread memory and main memory.	                              It synchronizes the value of all variables between thread memory and main memory.
6. Volatile fields are not subject to compiler optimization.	Synchronize is subject to compiler optimization.



>> Collection Interface 
      - methods 
            - int size(), boolean isEmpty(), boolean contains(Object element), 
            boolean add(E element), boolean remove(Object element), and Iterator<E> iterator()
            - bulk operations 
                  - containsAll, addAll, removeAll, clear
      - traversing
            -(1) using aggregate operations 
            -(2) with the for-each construct and 
            -(3) by using Iterators.

      - Set Interface
            - HashSet
                  - which stores its elements in a hash table, is the best-performing implementation; 
                  - however it makes no guarantees concerning the order of iteration. 
            - TreeSet 
                  - which stores its elements in a red-black tree, orders its elements based on their values; 
                  - it is substantially slower than HashSet. 
            - LinkedHashSet 
                  - which is implemented as a hash table with a linked list running through it, 
                  - orders its elements based on the order in which they were inserted into the set (insertion-order). 
                  - slower that hash sets 



>> Exception 
      - Checked  
            - compiler warns if some function throws this type of exception and we we have not 
            mentioned it using the throws keyword like - "function myFunc(..) throws SomeException"
            - IOException 
            - ClassNotFoundException
            - SQLException

      - Unchecked 
            - complier doesnt warn about them 
            - in C++ all exceptions are Unchecked and compiler doesnt warn about any
            - IndexOutOfBounds
            - ArithmeticException
            - NullPointerException
                  - Thrown when an application attempts to use null in a case where an object is required. 
                  Example: Calling the instance method of a null object



>> Blocking Queue
      - A blocking queue is a queue that blocks when you try to dequeue from it and the queue 
      is empty, or if you try to enqueue items to it and the queue is already full. A thread 
      trying to dequeue from an empty queue is blocked until some other thread inserts an item 
      into the queue. A thread trying to enqueue an item in a full queue is blocked until some 
      other thread makes space in the queue, either by dequeuing one or more items or clearing 
      the queue completely.

>> Synchronization 
      - It is thread-safe and can be shared with many threads.
      - Non synchronized -It is not-thread safe and can't be shared between 
      many threads without proper synchronization code.



>> Friend Functions 
      - Java doesnot have them
      - they break the design, because they have to be declared outside the class 
      - a similar functionality ca be found here 
            - https://stackoverflow.com/questions/182278/is-there-a-way-to-simulate-the-c-friend-concept-in-java



>> Concurrency/Multithreading 
      
      - Concurrency is the ability to run several programs or several parts of a program in parallel. 
      - If a time consuming task can be performed asynchronously or in parallel, 
      this improves the throughput and the interactivity of the program.

      - Process vs. threads
            - process 
                  - A process runs independently and isolated of other processes. 
                  It cannot directly access shared data in other processes. 
                  The resources of the process, e.g. memory and CPU time, are 
                  allocated to it via the operating system.
            - threads 
                  - so called lightweight process. It has its own call stack, 
                  but can access shared data of other threads in the same process. 
                  Every thread has its own memory cache. If a thread reads shared data, 
                  it stores this data in its own memory cache.

      - How multithreading is achieved 
            - A Java application runs by default in one process. Within a Java application you 
            work with several threads to achieve parallel processing or asynchronous behavior.

      - Concurrency issues
            - Threads have their own call stack, but can also access shared data. Therefore 
            you have two basic problems, 
            - VISIBILITY and 
            - ACCESS problems.
                  - A visibility problem occurs if thread A reads shared data which is later 
                  changed by thread B and thread A is unaware of this change      
                  - An access problem can occur if several threads access and change the same 
                  shared data at the same time.

      - Locks and thread synchronization
            - Java provides locks to protect certain parts of the code to be executed by several threads at the same time
            - Types of Synchronization 
                  - Process Synchronization
                  - Thread synchronization
                        - Mutual Exclusive
                              - synchronized functions 
                              - synchronized blocks  
                                    - Synchronized block is used to lock an object for any shared resource
                              - static synchronization.
                                    - If you make any static method as synchronized, the lock will be on the class not on object.
                                    - Suppose there are two objects of a shared class(e.g. Table) named 
                                    object1 and object2.In case of synchronized method and synchronized 
                                    block there cannot be interference between t1 and t2 or t3 and t4 
                                    because t1 and t2 both refers to a common object that have a single 
                                    lock.But there can be interference between t1 and t3 or t2 and t4 
                                    because t1 acquires another lock and t3 acquires another lock.I want 
                                    no interference between t1 and t3 or t2 and t4.Static synchronization 
                                    solves this problem.
                        - Cooperation (Inter-thread communication in java)
            
            - How does int work?
                  - Synchronization is built around an internal entity known as the 
                  lock or monitor. Every object has an lock associated with it. 
                  By convention, a thread that needs consistent access to an object's 
                  fields has to acquire the object's lock before accessing them, and 
                  then release the lock when it's done with them.
            - The synchronized keyword in Java ensures
                  - that only a single thread can execute a block of code at the same time
                  - that each thread entering a synchronized block of code sees the effects 
                  of all previous modifications that were guarded by the same lock 

      - Some disadvantages
            - creating a too many threads may lead to memory errors and 
            - performance issues due to a lot of CPU context switching 


>> garbage collector - 
      - Garbage is nothing but the unrefrenced objects 
      - How can an object be unreferenced?
            - By nulling the reference
                  - Employee e=new Employee();  
                  - e=null;  
            - By assigning a reference to another
                  - Employee e1=new Employee();  
                  - Employee e2=new Employee();  
                  - e1=e2
            - By anonymous object etc
                  - new Employee(); 




----> complete the output series on GFG




// questions 


1. Q1. Explain JVM, JRE and JDK?
 
 JVM 
      - runtime engine for java application 
      - calls the main function 
      - part of JRE
      - is different for every machine
      - part of JRE
      - JVMs are available for many hardware and software platforms (so JVM is platform dependent

 JRE 
      - runtime environment 
      - implements JVM
      - needed libraries and support 

 JDK
      - all development tools for a java application
      - mainly includes JRE and 
      - interpretor, compiler (javac), archiver(jar)


 JIT 
      - compiler byte code to machine code      
      - makes execution faster by storing the compiled methods that are used frequently 
      - also it makes optimization by removig unused code 

2. What is finalize() method?
 
Unlike c++ , we don’t need to destroy objects explicitly in Java. 
‘Garbage Collector‘ does that automatically for us. Garbage Collector 
checks if no references to an object exist, that object is assumed to
be no longer required, and the memory occupied by the object can be 
freed. Sometimes an object can hold non-java resources such as file 
handle or database connection, then you want to make sure these 
resources are also released before object is destroyed. To perform 
such operation Java provide protected void finalize() in object class. 
You can override this method in your class and do the required tasks. 
Right before an object is freed, the java run time calls the finalize() 
method on that object. Refer this for more details.
Note: 
The Garbage collector of JVM collects only those objects that are 
created by new keyword. 
So if you have created any object without new, 
you can use finalize method to perform cleanup processing (destroying remaining objects).


>> gc() method 

The gc() is found in System and Runtime classes.
Garbage collection is performed by a daemon thread called Garbage Collector(GC). 
This thread calls the finalize() method before object is garbage collected.

>> Why do you not explicitly call finalize() or start the garbage collector?

Neither finalization nor garbage collection is guaranteed(If they are explicitly invoked)



3. Why Java is platform independent?

Platform independent practically means “write once run anywhere”.


4. Why is Java not pure Object-oriented?

Java is not considered pure Object-oriented because it supports 
primitive data-types such as boolean, byte, char, int, float, double, 
long, short.


5. Define state and behaviour of Object

State : It is represented by attributes of an object. It also reflects 
the properties of an object.
Behavior : It is represented by methods of an object. It also reflects 
the response of an object with other objects.


6. Why static methods cannot access non-static variables or methods?

A static method cannot access non-static variables or methods because 
static methods can be accessed without instantiating the class, so if 
the class is not instantiated the variables are not initialized and 
thus cannot be accessed from a static method.


7. Static variables

Static variables are created at start of program execution and destroyed 
automatically when execution ends.


8. Why the main method is static in java?

The method is static because otherwise there would be ambiguity: which constructor should be called? 
Especially if your class looks like this:

public class JavaClass
{
  protected JavaClass(int x)
  {   }
   public static void main(String[] args) 
   {

    }
}

In this case JVM cannot decide which constructor to call 
Also we dont want make a object and then call the main function when 
we can do it without it 


9. What happens if you remove static modifier from the main method?

Program compiles successfully. But at runtime throws an error 
“NoSuchMethodError”.


10. What is the scope of variables in Java in following cases? 

- member variables 
      - class level scope
- local variables 
      - method level scope
- loop variables 
      - scope inside {}


11. Can main method be overloaded 

Yes , 
but JVM calls the original one 
we can call the second one from original main method

12. object cloning

class must implement java.lang.Cloneable interface 
or exception is thrown CloneNotSupportedException


13. What is a bllank final variable?

final int i = 10;
i = 30; // Error because i is final.

A blank final variable in Java is a final variable that is 
not initialized during declaration. Below is a simple example 
of blank final.

// A simple blank final example 
    final int i;
    i = 30;


>> What is deadly diamond problem?
      The ambiguity is, classes B and C inherits from class A, and class D inherits 
      from the classes B and C. If there is a method in class A, both the B and C classes 
      and overriding the method and D doesn’t override it.


14.          HashMap                                                       HashTable

1. HashMap is non synchronized.                                   1. Hashtable is synchronized. 
It is not-thread safe and can’t be shared                         It is thread-safe and can be shared with many threads.
between many threads without proper
 synchronization code whereas 
  
2. HashMap allows one null key and multiple null values           2. Hashtable doesn’t allow any null key or value.
whereas

3. not sychronized so fast                                        3. Synchronized, so slow 

4. HashMap is generally preferred over HashTable if thread synchronization is not needed


 -- LinkedHashMap -> maintains the order of inserted elements 
 -- TreeHashMap -> sorts the data acording to the key

15. C++ features not in Java
      - all objects on heap
      - no multiple inheritence
      - no operator overloading
      - no goto 
      - no pointers 
      - no arrow operators 
      - no delete operator 
      - no destructor 
      - no global variable
      - no friend function 



16. Difference b/w ArrayList and Vector

            ArrayList	                                                            Vector
1) ArrayList is not synchronized.	                                    1) Vector is synchronized.
2) ArrayList increments 50% of current array size if the 	            2) Vector increments 100% means doubles the array size if 
number of elements exceeds from its capacity.                             the total number of elements exceeds than its capacity.
3) ArrayList is not a legacy class.It is introduced in JDK 1.2.	      3) Vector is a legacy class.
4) ArrayList is FAST because it is non-synchronized.	                  4) Vector is SLOW because it is synchronized, i.e., in a multithreading environment, it holds the other threads in runnable or non-runnable state until current thread releases the lock of the object.
5) ArrayList uses the Iterator interface to traverse the elements.	5) A Vector can use the Iterator interface or Enumeration interface to traverse the elements



17. What are some applications of multithreading? 
      - Web Browsers 
            - downloading files and browsing at the same time 
      - Web Servers 
            - A threaded web server handles each request with a new thread. 
            - There is a thread pool and every time a new request comes in, 
            it is assigned to a thread from the thread pool.
      - Text Editors/IDEs
            - spell-checking, formatting 
            - Error highlighting 
            -of text and saving the text are done concurrently by multiple threads. 
            - The same applies for Word processors also. 



17. What are Shutdown Hooks ?
The shutdown hook can be used to perform cleanup resource or 
save the state when JVM shuts down normally or abruptly. 
Performing clean resource means closing log file, sending 
some alerts or something else. So if you want to execute 
some code before JVM shuts down, use shutdown hook.

When does the JVM shut down?
- The JVM shuts down when:
- user presses ctrl+c on the command prompt
- System.exit(int) method is invoked
- user logoff
- user shutdown etc.



18. What are different ways to create object other than new keyword
      - Using Class.forName() and Class.newInstance()
      - ClassLoader loadClass()
      - Using Object.clone()
      - Deserialization
      - Using reflection



19. Difference b/w sleep() and wait()

            wait()	                              sleep()
1. wait() method releases the lock	            sleep() method doesn't release the lock.
2. is the method of Object class	is          It is the method of Thread class
3. is the non-static method	                  It is the static method
4. should be notified by notify()               after the specified amount of time, sleep is completed
or notifyAll() method



20.  How many types of memory areas are allocated by JVM?

 - Class(Method) Area: Class Area stores per-class structures such as the runtime constant pool, field, method data, and the code for methods.
 - Heap: 
 - Stack: 
 - Native Method Stack: It contains all the native methods used in the application.




21. If I don't provide any arguments on the command line, then what will the value stored in the String array passed into the main() method, empty or NULL?
It is empty, but not null.



22. What if I write static public void instead of public static void?
The program compiles and runs correctly because the order of specifiers doesn't matter in Java.



23. When should we use static method?
One rule-of-thumb: ask yourself 
"Does it make sense to call this method, even if no object has been constructed yet?" 
If so, it should definitely be static.

example - a method to convert speed of the car from kmph to mps

class Car {
      kmphTomps()
}



24. Difference between Java and JavaScript
JavaScript is Object-Based Programming Language where objects are built in (like window object)



25. Can constructer be private?
Yes it can be. Like in singleton class, a static method is the used for object creation
