1. Q1. Explain JVM, JRE and JDK?
 
 JVM 
      - runtime engine for java application 
      - calls the main function 
      - part of JRE
      - is different for every machine
      - part of JRE

 JRE 
      - runtime environment 
      - implements JVM
      - needed libraries and support 

 JDK
      - all development tools for a java application
      - mainly includes JRE and 
      - interpretor, compiler (javac), archiver(jar)


2. What is finalize() method?
 
Unlike c++ , we don’t need to destroy objects explicitly in Java. 
‘Garbage Collector‘ does that automatically for us. Garbage Collector 
checks if no references to an object exist, that object is assumed to
 be no longer required, and the memory occupied by the object can be 
 freed. Sometimes an object can hold non-java resources such as file 
 handle or database connection, then you want to make sure these 
 resources are also released before object is destroyed. To perform 
 such operation Java provide protected void finalize() in object class. 
 You can override this method in your class and do the required tasks. 
 Right before an object is freed, the java run time calls the finalize() 
 method on that object. Refer this for more details.


3. Why Java is platform independent?

Platform independent practically means “write once run anywhere”.


4. Why is Java not pure Object-oriented?

Java is not considered pure Object-oriented because it supports 
primitive data-types such as boolean, byte, char, int, float, double, 
long, short.


5. Define state and behaviour of Object

State : It is represented by attributes of an object. It also reflects 
the properties of an object.
Behavior : It is represented by methods of an object. It also reflects 
the response of an object with other objects.


6. Why static methods cannot access non-static variables or methods?

A static method cannot access non-static variables or methods because 
static methods can be accessed without instantiating the class, so if 
the class is not instantiated the variables are not initialized and 
thus cannot be accessed from a static method.


7. Static variables

Static variables are created at start of program execution and destroyed 
automatically when execution ends.


8. Why the main method is static in java?

The method is static because otherwise there would be ambiguity: which constructor should be called? 
Especially if your class looks like this:

public class JavaClass
{
  protected JavaClass(int x)
  {   }
   public static void main(String[] args) 
   {

    }
}

In this case JVM cannot decide which constructor to call 
Also we dont want make a object and then call the main function when 
we can do it without it 


9. What happens if you remove static modifier from the main method?

Program compiles successfully. But at runtime throws an error 
“NoSuchMethodError”.


10. What is the scope of variables in Java in following cases? 

- member variables 
      - class level scope
- local variables 
      - method level scope
- loop variables 
      - scope inside {}


11. Can main method be overloaded 

Yes , 
but JVM calls the original one 
we can call the second one from original main method

12. object cloning

class must implement java.lang.Cloneable interface 
or exception is thrown CloneNotSupportedException


13. What is a bllank final variable?

final int i = 10;
i = 30; // Error because i is final.

A blank final variable in Java is a final variable that is 
not initialized during declaration. Below is a simple example 
of blank final.

// A simple blank final example 
    final int i;
    i = 30;



14.          HashMap                                                       HashTable

1. HashMap is non synchronized.                                   1. Hashtable is synchronized. 
It is not-thread safe and can’t be shared                         It is thread-safe and can be shared with many threads.
between many threads without proper
 synchronization code whereas 
  
2. HashMap allows one null key and multiple null values           2. Hashtable doesn’t allow any null key or value.
whereas

3. not sychronized so fast                                        3. Synchronized, so slow 

4. HashMap is generally preferred over HashTable if thread synchronization is not needed


 -- LinkedHashMap -> maintains the order of inserted elements 
 -- TreeHashMap -> sorts the data acording to the key

15. C++ features not in Java
      - all objects on heap
      - no multiple inheritence
      - no operator overloading
      - no goto 
      - no pointers 
      - no arrow operators 
      - no delete operator 
      - no destructor 
      - no global variable
      - no friend function 